abline(0, 0)
plot(mass.modi)
plot(mass.modi)
plot(mass.modi)
plot(density(resid(mass.modi)))
plot(fitted(mass.modi), residuals(mass.modi),
xlab="Predicted scores", ylab="Residuals")
newdata= data.frame(Mass=4.5)
predict(mass.modi, newdata, interval="predict")
Masss =  MT$Mass....c.3.33..4.62..5.43..5.73..6.12..6.29..6.45..6.51..6.65..
Tcells = MT$Tcell....c.0.252..0.263..0.251..0.251..0.183..0.213..0.332..0.203..
plot(Tcells, Masss,            # plot the variables
+   xlab="Mass",        # x−axis label
+   ylab="T-Cells")
Masss =  MT$Mass....c.3.33..4.62..5.43..5.73..6.12..6.29..6.45..6.51..6.65..
Tcells = MT$Tcell....c.0.252..0.263..0.251..0.251..0.183..0.213..0.332..0.203..
plot(Tcells, Masss,            # plot the variables
xlab="Mass",        # x−axis label
ylab="T-Cells")
Masss =  MT$Mass....c.3.33..4.62..5.43..5.73..6.12..6.29..6.45..6.51..6.65..
Tcells = MT$Tcell....c.0.252..0.263..0.251..0.251..0.183..0.213..0.332..0.203..
plot(Masss, Tcells,            # plot the variables
xlab="Mass",        # x−axis label
ylab="T-Cells")
predict(lm1,interval="confidence")
predict(mass.modi,interval="confidence")
predict(mass.modi, newdata, interval="confidence")
install.packages("investr")
invest(mass.modi, y0=0.3)
MT <- data.frame(
Mass <- c(3.33,4.62,5.43,5.73,6.12,6.29,6.45,6.51,6.65,6.75,6.81,7.56,7.83,8.02,8.06,8.18,9.08,9.15,9.35,9.42,9.95),
Tcell <- c(0.252,0.263,0.251,0.251,0.183,0.213,0.332,0.203,0.252,0.342,0.471,0.431,0.312,0.304,0.37,0.381,0.43,0.43,0.213,0.508,0.411)
)
mass.modi= lm(Tcell ~ Mass, data = MT)
invest(mass.modi, y0=0.3)
invest(mass.modi, y0=0.3)
install.packages("investr")
install.packages("investr")
newdata= data.frame(Tcell=0.3)
predict(mass.modi, newdata, interval="predict")
newdata= data.frame(Tcell=0.3)
predict(mass.modi, newdata, interval="predict")
MT <- data.frame(
Mass <- c(3.33,4.62,5.43,5.73,6.12,6.29,6.45,6.51,6.65,6.75,6.81,7.56,7.83,8.02,8.06,8.18,9.08,9.15,9.35,9.42,9.95),
Tcell <- c(0.252,0.263,0.251,0.251,0.183,0.213,0.332,0.203,0.252,0.342,0.471,0.431,0.312,0.304,0.37,0.381,0.43,0.43,0.213,0.508,0.411)
)
newdata= data.frame(Tcell=0.3)
predict(mass.modi, newdata, interval="predict")
MT <- data.frame(
Mass <- c(3.33,4.62,5.43,5.73,6.12,6.29,6.45,6.51,6.65,6.75,6.81,7.56,7.83,8.02,8.06,8.18,9.08,9.15,9.35,9.42,9.95),
Tcell <- c(0.252,0.263,0.251,0.251,0.183,0.213,0.332,0.203,0.252,0.342,0.471,0.431,0.312,0.304,0.37,0.381,0.43,0.43,0.213,0.508,0.411)
)
mass.modi= lm(Mass ~ Tcell , data = MT)
newdata= data.frame(Tcell=0.3)
predict(mass.modi, newdata, interval="predict")
install.packages("investr")
invest(mass.modi, y0=0.3)
library(investr)
invest(mass.modi, y0=0.3)
MT <- data.frame(
Mass <- c(3.33,4.62,5.43,5.73,6.12,6.29,6.45,6.51,6.65,6.75,6.81,7.56,7.83,8.02,8.06,8.18,9.08,9.15,9.35,9.42,9.95),
Tcell <- c(0.252,0.263,0.251,0.251,0.183,0.213,0.332,0.203,0.252,0.342,0.471,0.431,0.312,0.304,0.37,0.381,0.43,0.43,0.213,0.508,0.411)
)
mass.modi= lm(Mass ~ Tcell , data = MT)
summary(mass.modi)
invest(mass.modi, y0=0.3)
mass.modi <- lm(Mass ~ Tcell , data = MT)
invest(mass.modi, y0=0.3)
invest(mass.modi, y0=0.3, x0.name = Tcell)
View(newdata)
View(newdata)
View(newdata)
MT <- data.frame(
Mass <- c(3.33,4.62,5.43,5.73,6.12,6.29,6.45,6.51,6.65,6.75,6.81,7.56,7.83,8.02,8.06,8.18,9.08,9.15,9.35,9.42,9.95),
Tcell <- c(0.252,0.263,0.251,0.251,0.183,0.213,0.332,0.203,0.252,0.342,0.471,0.431,0.312,0.304,0.37,0.381,0.43,0.43,0.213,0.508,0.411)
)
mass.modi <- lm(Mass ~ Tcell , data = MT)
invest(mass.modi, y0=0.3)
invest(mass.modi, y0=0.3, x0.name=Mass)
invest(mass.modi, y0=0.3, x0.name=Tcell)
calibrate(mass.modi, y0=0.3)
library(Sleuth3)				#run this in every R session where you want to use Sleuth3
ex0722			#prints the data so you can be sure it is there
colnames(ex0722)	#prints column names so you know how to reference them
attach(ex0722)		#creates R objects for each of the individual columns
pairs(~Force + Height + Species)
#Part A
plot(Force,Height,col=as.factor(Species),pch=as.numeric(as.factor(Species)))
legend("topleft",as.vector(unique(Species)),col=as.factor(unique(Species)),pch=as.numeric(as.factor(unique(Species))))
#Part C & D
fit <- lm(Force~Height*Species)
par(mfrow=c(2,2))
plot(logfit)
anova(logfit)
summary(logfit)
par(mfrow=c(2,3))
termplot(fit)
#Part A
plot(Force,Height,col=as.factor(Species),pch=as.numeric(as.factor(Species)))
legend("topleft",as.vector(unique(Species)),col=as.factor(unique(Species)),pch=as.numeric(as.factor(unique(Species))))
#Part C & D
logfit <- lm(Force~Height*Species)
par(mfrow=c(2,2))
plot(logfit)
anova(logfit)
summary(logfit)
par(mfrow=c(2,3))
termplot(fit)
par(mfrow=c(1,1))
termplot(logfit, terms="Species")
#Part A
plot(Force,Height,col=as.factor(Species),pch=as.numeric(as.factor(Species)))
legend("topleft",as.vector(unique(Species)),col=as.factor(unique(Species)),pch=as.numeric(as.factor(unique(Species))))
#Part C & D
logfit <- lm(Force~Height*Species)
par(mfrow=c(2,2))
plot(logfit)
anova(logfit)
summary(logfit)
par(mfrow=c(2,3))
termplot(logfit)
#Part A
plot(Force,Height,col=as.factor(Species),pch=as.numeric(as.factor(Species)))
legend("topleft",as.vector(unique(Species)),col=as.factor(unique(Species)),pch=as.numeric(as.factor(unique(Species))))
#Part C & D
logfit <- lm(Force~Height*Species)
par(mfrow=c(2,2))
plot(logfit)
anova(logfit)
summary(logfit)
par(mfrow=c(2,3))
termplot(logfit, terms=*)
par(mfrow=c(2,3))
termplot(logfit, terms='*')
par(mfrow=c(2,3))
termplot(logfit, terms='Species')
plot(Force~Height, data = ex0722,)
abline(lm(Force~Height*Species, data = ex0722, subset = Species == "Hemigrapsus nudus"))
abline(lm(Force~Height*Species, data = ex0722,subset = Species == "Cancer productus"), lty = 2)
abline(lm(Force~Height*Species, data = ex0722,subset = Species == "Lophopanopeus bellus"), lty = 3)
legend("topright", legend = c("Hemigrapsus nudus", "Cancer productus","Lophopanopeus bellus"),pch = 1:2, lty = 1:2, bty = "n")
plot(Force~Height, data = ex0722,)
abline(lm(Force~Height*Species, data = ex0722, subset = Species == "Hemigrapsus nudus"))
abline(lm(Force~Height*Species, data = ex0722,subset = Species == "Cancer productus"), lty = 2)
abline(lm(Force~Height*Species, data = ex0722,subset = Species == "Lophopanopeus bellus"), lty = 3)
legend("topright", legend = c("Hemigrapsus nudus", "Cancer productus","Lophopanopeus bellus"),pch = 1:3, lty = 1:3, bty = "n")
plot(Force,Height,col=as.factor(Species),pch=as.numeric(as.factor(Species)))
abline(lm(Force~Height*Species, data = ex0722, subset = Species == "Hemigrapsus nudus"))
abline(lm(Force~Height*Species, data = ex0722,subset = Species == "Cancer productus"), lty = 2)
abline(lm(Force~Height*Species, data = ex0722,subset = Species == "Lophopanopeus bellus"), lty = 3)
legend("topright", legend = c("Hemigrapsus nudus", "Cancer productus","Lophopanopeus bellus"),pch = 1:3, lty = 1:3, bty = "n")
swirl()
library(swirl)
swirl()\
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vec <- sapply(flags, class())
cls_vec <- sapply(flags, class
)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean\)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
uniquw_vals <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals,function(elem) elem[2])
library(datasets)
data(iris)
?iris
header(iris)
head(iris)
sapply(iris$Sepal.Length, mean)
mean(iris$Sepal.Length)
apply(iris[,1:4]2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(split(mtcars$cyl, mtcars$mpg), mean)
mean(mtcars$cyl, mtcars$mpg)
mean(mtcars$mpg)
mean(mtcars$mpg[,1])
mean(mtcars$mpg[1,])
new <- tapply(mtcars$hp, mtcars$cyl, mean)
new
round(abs(new[3]-new[1]))
debug(ls)
ls
swirl()
Jonathan
exit
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
log(5)
log(-5)
log10(5)
sqet(5)
sqrt(5)
n <- 50
nsim <-1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim){
x <- rnorm(n)
lotsa.medians[i] <- median(x)
}
summary(lotsa.medians)
length(lotsa.medians)
mean(lotsa.medians)
hist(lotsa.medians)
n <- 20
nsim <-1000
n <- 10
nsim <-1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim){
x <- rnorm(n)
lotsa.medians[i] <- median(x)
}
summary(lotsa.medians)
length(lotsa.medians)
mean(lotsa.medians)
hist(lotsa.medians)
n <- 50
nsim <-1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim){
x <- rexp(n,10)
lotsa.medians[i] <- median(x)
}
summary(lotsa.medians)
length(lotsa.medians)
mean(lotsa.medians)
hist(lotsa.medians)
n <- 10
computefactorial <- function(x){
if(n<=1){
return(1)
}
else {
return(x*computefactorial(x-1))
}
}
computefactorial(2)
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
factorial(0)
factorial(2)
factorial(5)
factorial(0\)
factorial(0)
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}}
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
}
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
}
compute <- function(num)
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
compute(5)
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
Library(swirl)
library(swirl)
swirl()
swirl()
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[(c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data=1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina","Kelly","Sean")
my_matrix2 <-cbind(patients)
cbind(patients, my_matrix)
my_matrix2 <-cbind(patients)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames,my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
head(flags)
swirl()
bye()
str(airquality)
# Take only Temp columns
Temperature <- airquality$Temp
hist(Temperature)
# Histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
)
plot(x=airquality$Month, y=airquality$Temp)
plot(x=airquality$Month, y=airquality$Temp, xlab="Month", ylab="Temperature", main="Temperature by Month")
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temperature", ylab="Ozone", main="Temperature vs Ozone")
summary(cars)
summary(pressure)
plot(x=pressure, y=Temperature, xlab="Pressure", ylab="Temperature", Main="Temperature vs Pressure" )
head(pressure)
plot(x=pressure$pressure, y=pressure$temperature, xlab="Pressure", ylab="Temperature", Main="Temperature vs Pressure" )
plot(x=pressure$pressure, y=pressure$temperature, xlab="Pressure", ylab="Temperature", main="Temperature vs Pressure" )
warnings()
swirl()
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_ect <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
list.files
list.files()
setwd("C:/Users/Jfranks9/Dropbox/Classes/6306 Doing Data Science/Week 3")
setwd("C:/Users/Jfranks9/Dropbox/Classes/6306 Doing Data Science/Week 3/Breakout")
list.files()
read.csv("anneal.csv")
anneal <- read.csv("anneal.csv")
apply(anneal, 35, sum)
apply(anneal, 35, sum, rm.na=TRUE)
head(anneal)
head(anneal[1,35])
anneal[1,35]
anneal[0,35]
colnames(anneal)[35]
sum(:,35)
sum(anneal[:,35])
t <- anneal[:,35]
sum(anneal$X0000)
sum(anneal$colnames(anneal)[35])
sum(anneal$(colnames(anneal)[35])
myCols <- c(35,4)
anneal_35 <- anneal_df[, myCols]
colSums(anneal_35)
myCols <- c(35,4)
anneal_35 <- anneal_df[, myCols]
colSums(anneal_35)
myCols <- c(35,4)
anneal_35 <- anneal_df[, myCols]
anneal_35 <- anneal[, myCols]
colSums(anneal_35)
sum(anneal[35])
