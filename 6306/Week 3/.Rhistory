class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean\)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
uniquw_vals <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals,function(elem) elem[2])
library(datasets)
data(iris)
?iris
header(iris)
head(iris)
sapply(iris$Sepal.Length, mean)
mean(iris$Sepal.Length)
apply(iris[,1:4]2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(split(mtcars$cyl, mtcars$mpg), mean)
mean(mtcars$cyl, mtcars$mpg)
mean(mtcars$mpg)
mean(mtcars$mpg[,1])
mean(mtcars$mpg[1,])
new <- tapply(mtcars$hp, mtcars$cyl, mean)
new
round(abs(new[3]-new[1]))
debug(ls)
ls
swirl()
Jonathan
exit
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags,class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
log(5)
log(-5)
log10(5)
sqet(5)
sqrt(5)
n <- 50
nsim <-1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim){
x <- rnorm(n)
lotsa.medians[i] <- median(x)
}
summary(lotsa.medians)
length(lotsa.medians)
mean(lotsa.medians)
hist(lotsa.medians)
n <- 20
nsim <-1000
n <- 10
nsim <-1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim){
x <- rnorm(n)
lotsa.medians[i] <- median(x)
}
summary(lotsa.medians)
length(lotsa.medians)
mean(lotsa.medians)
hist(lotsa.medians)
n <- 50
nsim <-1000
lotsa.medians <- numeric(nsim)
for (i in 1:nsim){
x <- rexp(n,10)
lotsa.medians[i] <- median(x)
}
summary(lotsa.medians)
length(lotsa.medians)
mean(lotsa.medians)
hist(lotsa.medians)
n <- 10
computefactorial <- function(x){
if(n<=1){
return(1)
}
else {
return(x*computefactorial(x-1))
}
}
computefactorial(2)
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
factorial(0)
factorial(2)
factorial(5)
factorial(0\)
factorial(0)
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}}
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
}
factorial <- function(x){
if(x=0){
print(1)
}
else{
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
}
compute <- function(num)
if(num < 0) {
print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
print("The factorial of 0 is 1")
} else {
for(i in 1:num) {
factorial = factorial * i
}
print(paste("The factorial of", num ,"is",factorial))
}
compute(5)
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
factorial <- function(x){
y <- 1
for(i in 1:x){
y <-y*((1:x)[i])
print(y)
}
}
Library(swirl)
library(swirl)
swirl()
swirl()
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[(c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(data=1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina","Kelly","Sean")
my_matrix2 <-cbind(patients)
cbind(patients, my_matrix)
my_matrix2 <-cbind(patients)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames,my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
swirl()
head(flags)
swirl()
bye()
str(airquality)
# Take only Temp columns
Temperature <- airquality$Temp
hist(Temperature)
# Histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
)
plot(x=airquality$Month, y=airquality$Temp)
plot(x=airquality$Month, y=airquality$Temp, xlab="Month", ylab="Temperature", main="Temperature by Month")
plot(x=airquality$Temp, y=airquality$Ozone, xlab="Temperature", ylab="Ozone", main="Temperature vs Ozone")
summary(cars)
summary(pressure)
plot(x=pressure, y=Temperature, xlab="Pressure", ylab="Temperature", Main="Temperature vs Pressure" )
head(pressure)
plot(x=pressure$pressure, y=pressure$temperature, xlab="Pressure", ylab="Temperature", Main="Temperature vs Pressure" )
plot(x=pressure$pressure, y=pressure$temperature, xlab="Pressure", ylab="Temperature", main="Temperature vs Pressure" )
warnings()
swirl()
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_ect <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
setwd("C:/Users/Jfranks9/Dropbox/Classes/6306 Doing Data Science/Week 3/awesome-public-datasets-master/awesome-public-datasets-master/Datasets/titanic.csv")
ls
df <- read.csv(titanic.csv)
df <- read.csv(titanic)
list.files()
df <- read.csv(titanic.csv)
df <- read.csv(\titanic.csv)
df <- read.csv(file="titanic.csv")
head(df)
dt[, list(Freq = .N), by = names(df)]
library(data.table)
aggregate(data = transform(a, Freq = seq_len(nrow(df))), Freq ~ ., length)
aggregate(data = transform(df, Freq = seq_len(nrow(df))), Freq ~ ., length)
install.packages('plyr')
library('plyr')
count(df,"sex")
count(df,'sex')
count(df,'Sex')
mylist <- c('Survived','Age,'Fare')
mylist <- c('Survived','Age','Fare')
apply(df,mylist,mean)
apply(df,2,mean)
mylist <- c(df$Survived,df$Age,df$Fare)
lapply(mylist,[,mean)
lapply(mylist,mean)
sapply(mylist,mean)
apply(mylist,mean)
apply(df,'Age'mean)
apply(df,'Age',mean)
mapply(mean,df$Age,df$Fare,df$Survived)
mapply(mean,df$Age,df$Fare,df$Survived, na.rm=TRUE)
apply(mean,df$Age,df$Fare,df$Survived, na.rm=TRUE)
apply(c(df$Age,df$Fare,df$Survived),mean, na.rm=TRUE)
apply(df, c('Age','Fare','Survived'),mean, na.rm=TRUE)
sapply(df, c('Age','Fare','Survived'),mean, na.rm=TRUE)
sapply(c(df$Age,df$Fare,df$Survived),mean, na.rm=TRUE)
sapply(df,mean,'Age','Fare')
sapply(df,mean,'Age','Fare',na.rm=TRUE)
sapply(df,mean,'Age',na.rm=TRUE)
sapply(df,mean,'Age',na.rm=TRUE)
mean(df$Age)
mean(df$Age,na.rm=TRUE)
sapply(df,mean(na.rm=TRUE),'Age')
sapply(mylist,mean,na.rm=TRUE)
sapply(mylist,mean,na.rm=TRUE,NaN.rm=TRUE)
apply(mylist,mean,na.rm=TRUE)
apply?
help
apply(mylist,'Age', mean,na.rm=TRUE)
apply(mylist,3, mean,na.rm=TRUE)
apply(mylist,1, mean,na.rm=TRUE)
lapply(mylist, mean,na.rm=TRUE)
sapply(mylist, mean,na.rm=TRUE)
apply(mylist,2, mean,na.rm=TRUE)
apply(mylist,2, mean,)
head(mylist)
mylist
apply(df,2, mean,na.rm=TRUE)
apply(df,2, mean,nan.rm=TRUE)
apply(df,2, mean(nan.rm=TRUE)
apply(df,2, mean(nan.rm=TRUE)
apply(df,2, mean(nan.rm=TRUE))
apply(df,2, mean,na.rm=TRUE)
apply(df,2,mean na.rm=TRUE)
apply(df,2,mean,na.rm=TRUE)
mean(df$Survived, na.rm=TRUE)
apply(df,1,mean,na.rm=TRUE)
sapply(df,2,mean,na.rm=TRUE)
tapply(df,2,mean,na.rm=TRUE)
tapply(mylist,2,mean,na.rm=TRUE)
db <- data.frame(df$Survived,df$Age,df$Fare)
apply(db,2,mean,na.rm=TRUE)
library('plyr')
df <- read.csv(file="titanic.csv")
library('plyr')
#df <- read.csv(file="titanic.csv")
count(df,'Sex')
db <- data.frame(df$Survived,df$Age,df$Fare)
apply(db,2,mean,na.rm=TRUE)
cd
cd-
-
s
cd -
2
setwd("C:/Users/Jfranks9/Dropbox/Classes/6306 Doing Data Science/Week 3")
ls
list.files()
data <- read.csv("sleep_data_01.csv")
head(data)
data
x <- data
medianAge <- mean(x$Age, na.rm=TRUE)
maxSleep <- max(x$Duration, na.rm=TRUE)
minSleep <- min(x$Duration, na.rm=TRUE)
stdRSES <- sd(x$RSES, na.rm=TRUE) / 5
medianRSES <-mean(x$RSES, na.rm=TRUE) / 5
range <- maxSleep - minSleep
report <- data.frame(medianAge,medianRSES,stdRSES,range)
colname(report) <- c("MedianAge","SelfEsteem","SE_SD","DurationRange")
colnames(report) <- c("MedianAge","SelfEsteem","SE_SD","DurationRange")
apply(report,2,round, digits=2)
sleep <- function(x){
medianAge <- mean(x$Age, na.rm=TRUE)
maxSleep <- max(x$Duration, na.rm=TRUE)
minSleep <- min(x$Duration, na.rm=TRUE)
stdRSES <- sd(x$RSES, na.rm=TRUE) / 5
medianRSES <-mean(x$RSES, na.rm=TRUE) / 5
range <- maxSleep - minSleep
report <- data.frame(medianAge,medianRSES,stdRSES,range)
colnames(report) <- c("MedianAge","SelfEsteem","SE_SD","DurationRange")
apply(report,2,round, digits=2)
}
SR <-sleep(data)
sr
SR
count(df,'Sex')
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(0:1, 100, prob=c(0.3,0.7))
sample(0:1, 100, replace=TRUE prob=c(0.3,0.7))
sample(0:1, 100, replace=TRUE, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100,
| replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100, sd=25)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10)
)
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
